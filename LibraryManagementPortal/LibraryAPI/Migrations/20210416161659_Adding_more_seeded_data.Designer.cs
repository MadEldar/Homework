// <auto-generated />
using System;
using LibraryAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryAPI.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20210416161659_Adding_more_seeded_data")]
    partial class Addingmoreseededdata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibraryAPI.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c282102-8dd2-4240-9499-9e27c0ee726e"),
                            Author = "Erin LaTimer",
                            CategoryId = new Guid("a3c2a4d4-7726-4cd8-a316-a152a2c4864c"),
                            Title = "Frost"
                        },
                        new
                        {
                            Id = new Guid("5e6b02de-a70f-4e9d-bb2f-645782b28f4a"),
                            Author = "Erin LaTimer",
                            CategoryId = new Guid("a3c2a4d4-7726-4cd8-a316-a152a2c4864c"),
                            Title = "Flame"
                        },
                        new
                        {
                            Id = new Guid("efbc78fc-35da-45ad-afc4-e14ad0933447"),
                            Author = "J.K. Rowling",
                            CategoryId = new Guid("a3c2a4d4-7726-4cd8-a316-a152a2c4864c"),
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = new Guid("4c480d2b-d5d7-4247-b4ca-3a8ac84e5b15"),
                            Author = "Ernest Cline",
                            CategoryId = new Guid("b3b2b17d-8dd3-44b2-9463-4e7decf49b23"),
                            Title = "Ready Player One"
                        },
                        new
                        {
                            Id = new Guid("96db22b6-5ef2-498d-8afa-2541ebf58243"),
                            Author = "Ernest Cline",
                            CategoryId = new Guid("b3b2b17d-8dd3-44b2-9463-4e7decf49b23"),
                            Title = "Ready Player Two"
                        },
                        new
                        {
                            Id = new Guid("2edc5938-b014-42b8-a627-d5463acc58e7"),
                            Author = "Orson Scott Card",
                            CategoryId = new Guid("d79eae75-eaf5-4aa9-851d-e4b075de882f"),
                            Title = "Ender's Game"
                        },
                        new
                        {
                            Id = new Guid("6fc59759-ef52-48c1-9701-5a2d3b9526eb"),
                            Author = "Jane Austen",
                            CategoryId = new Guid("579d0bc0-54a5-4532-8d10-9d051982d28d"),
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = new Guid("1e7ca65b-ea66-4fbd-8d07-fc4633ad2392"),
                            Author = "Harper Lee",
                            CategoryId = new Guid("07be43c2-0a7a-4e4a-90ad-afc023e8e81e"),
                            Title = "To Kill A Mockingbird"
                        },
                        new
                        {
                            Id = new Guid("345608c8-fd49-40c3-8b21-2e83b6d5a670"),
                            Author = "William Golding",
                            CategoryId = new Guid("07be43c2-0a7a-4e4a-90ad-afc023e8e81e"),
                            Title = "Lord of the Flies"
                        },
                        new
                        {
                            Id = new Guid("3f89d951-93df-4c92-b6e2-42c7f477aea8"),
                            Author = "Neil Gaiman",
                            CategoryId = new Guid("a3c2a4d4-7726-4cd8-a316-a152a2c4864c"),
                            Title = "Stardust "
                        },
                        new
                        {
                            Id = new Guid("129caf7b-d67f-44cf-97d0-f8b167ccfdf4"),
                            Author = "Marc Cameron",
                            CategoryId = new Guid("07be43c2-0a7a-4e4a-90ad-afc023e8e81e"),
                            Title = "Tom Clancy's Oath of Office "
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.BookRequest", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("BookRequests");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("8c282102-8dd2-4240-9499-9e27c0ee726e"),
                            RequestId = new Guid("d7a2a0aa-cf5f-4f7c-9b67-1446fd26868b")
                        },
                        new
                        {
                            BookId = new Guid("5e6b02de-a70f-4e9d-bb2f-645782b28f4a"),
                            RequestId = new Guid("d7a2a0aa-cf5f-4f7c-9b67-1446fd26868b")
                        },
                        new
                        {
                            BookId = new Guid("efbc78fc-35da-45ad-afc4-e14ad0933447"),
                            RequestId = new Guid("d7a2a0aa-cf5f-4f7c-9b67-1446fd26868b")
                        },
                        new
                        {
                            BookId = new Guid("4c480d2b-d5d7-4247-b4ca-3a8ac84e5b15"),
                            RequestId = new Guid("64a15788-0644-4c9b-a229-1e2c47258deb")
                        },
                        new
                        {
                            BookId = new Guid("96db22b6-5ef2-498d-8afa-2541ebf58243"),
                            RequestId = new Guid("64a15788-0644-4c9b-a229-1e2c47258deb")
                        },
                        new
                        {
                            BookId = new Guid("2edc5938-b014-42b8-a627-d5463acc58e7"),
                            RequestId = new Guid("8e350b02-b94d-496a-951e-e4dcdf4281f1")
                        },
                        new
                        {
                            BookId = new Guid("6fc59759-ef52-48c1-9701-5a2d3b9526eb"),
                            RequestId = new Guid("8e350b02-b94d-496a-951e-e4dcdf4281f1")
                        },
                        new
                        {
                            BookId = new Guid("efbc78fc-35da-45ad-afc4-e14ad0933447"),
                            RequestId = new Guid("8e350b02-b94d-496a-951e-e4dcdf4281f1")
                        },
                        new
                        {
                            BookId = new Guid("1e7ca65b-ea66-4fbd-8d07-fc4633ad2392"),
                            RequestId = new Guid("e94962e7-fae9-4ac3-b6d9-81fa18528bb3")
                        },
                        new
                        {
                            BookId = new Guid("345608c8-fd49-40c3-8b21-2e83b6d5a670"),
                            RequestId = new Guid("e94962e7-fae9-4ac3-b6d9-81fa18528bb3")
                        },
                        new
                        {
                            BookId = new Guid("129caf7b-d67f-44cf-97d0-f8b167ccfdf4"),
                            RequestId = new Guid("e94962e7-fae9-4ac3-b6d9-81fa18528bb3")
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3c2a4d4-7726-4cd8-a316-a152a2c4864c"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("b3b2b17d-8dd3-44b2-9463-4e7decf49b23"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("d79eae75-eaf5-4aa9-851d-e4b075de882f"),
                            Name = "Sci-fi"
                        },
                        new
                        {
                            Id = new Guid("579d0bc0-54a5-4532-8d10-9d051982d28d"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("8039a8a7-726b-43e6-aa9d-20f1a0963100"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("07be43c2-0a7a-4e4a-90ad-afc023e8e81e"),
                            Name = "Thriller"
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.RequestModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7a2a0aa-cf5f-4f7c-9b67-1446fd26868b"),
                            RequestedDate = new DateTime(2021, 4, 16, 23, 16, 58, 757, DateTimeKind.Local).AddTicks(1800),
                            Status = "Approved",
                            UserId = new Guid("a8010d2d-2aac-4178-94a6-eb428e5d0e27")
                        },
                        new
                        {
                            Id = new Guid("64a15788-0644-4c9b-a229-1e2c47258deb"),
                            RequestedDate = new DateTime(2021, 4, 16, 23, 16, 58, 758, DateTimeKind.Local).AddTicks(6574),
                            Status = "Pending",
                            UserId = new Guid("a8010d2d-2aac-4178-94a6-eb428e5d0e27")
                        },
                        new
                        {
                            Id = new Guid("8e350b02-b94d-496a-951e-e4dcdf4281f1"),
                            RequestedDate = new DateTime(2021, 4, 16, 23, 16, 58, 758, DateTimeKind.Local).AddTicks(6610),
                            Status = "Rejected",
                            UserId = new Guid("97eb40c0-01ec-4e66-9ef2-f83dda656412")
                        },
                        new
                        {
                            Id = new Guid("e94962e7-fae9-4ac3-b6d9-81fa18528bb3"),
                            RequestedDate = new DateTime(2021, 4, 16, 23, 16, 58, 758, DateTimeKind.Local).AddTicks(6614),
                            Status = "Pending",
                            UserId = new Guid("97eb40c0-01ec-4e66-9ef2-f83dda656412")
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e237dfc-18b6-4963-87fe-08a5b6ee166c"),
                            Password = "admin123",
                            Role = "admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("a8010d2d-2aac-4178-94a6-eb428e5d0e27"),
                            Password = "user123",
                            Role = "user",
                            Username = "love2read"
                        },
                        new
                        {
                            Id = new Guid("97eb40c0-01ec-4e66-9ef2-f83dda656412"),
                            Password = "user456",
                            Role = "user",
                            Username = "novelreader"
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.Book", b =>
                {
                    b.HasOne("LibraryAPI.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryAPI.Models.BookRequest", b =>
                {
                    b.HasOne("LibraryAPI.Models.Book", "Book")
                        .WithMany("BookRequests")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.RequestModel", "Request")
                        .WithMany("BookRequests")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("LibraryAPI.Models.RequestModel", b =>
                {
                    b.HasOne("LibraryAPI.Models.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryAPI.Models.Book", b =>
                {
                    b.Navigation("BookRequests");
                });

            modelBuilder.Entity("LibraryAPI.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryAPI.Models.RequestModel", b =>
                {
                    b.Navigation("BookRequests");
                });

            modelBuilder.Entity("LibraryAPI.Models.User", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
