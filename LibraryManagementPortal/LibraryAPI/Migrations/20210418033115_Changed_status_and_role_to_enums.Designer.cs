// <auto-generated />
using System;
using LibraryAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryAPI.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20210418033115_Changed_status_and_role_to_enums")]
    partial class Changedstatusandroletoenums
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibraryAPI.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7dded3b-d6b9-4c06-8330-1b1933ca1829"),
                            Author = "Erin LaTimer",
                            CategoryId = new Guid("30962989-6cc8-493f-af07-d98e99eeb772"),
                            Title = "Frost"
                        },
                        new
                        {
                            Id = new Guid("4aa0eef9-0193-44c7-9fe1-c1b94fc9404a"),
                            Author = "Erin LaTimer",
                            CategoryId = new Guid("30962989-6cc8-493f-af07-d98e99eeb772"),
                            Title = "Flame"
                        },
                        new
                        {
                            Id = new Guid("8fbd4703-069e-4270-b629-b52bc3b0c507"),
                            Author = "J.K. Rowling",
                            CategoryId = new Guid("30962989-6cc8-493f-af07-d98e99eeb772"),
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = new Guid("a41edf6f-59f9-4abe-8faf-22589ea87d5b"),
                            Author = "Ernest Cline",
                            CategoryId = new Guid("fe58ee57-2ad7-4208-b969-765c52034e4d"),
                            Title = "Ready Player One"
                        },
                        new
                        {
                            Id = new Guid("30432c29-1b74-4086-aed9-e160ecc5ee98"),
                            Author = "Ernest Cline",
                            CategoryId = new Guid("fe58ee57-2ad7-4208-b969-765c52034e4d"),
                            Title = "Ready Player Two"
                        },
                        new
                        {
                            Id = new Guid("7f52f5b8-bc1c-4753-8216-101d80f52198"),
                            Author = "Orson Scott Card",
                            CategoryId = new Guid("4ae8cd04-36d5-43f1-bb2e-44ccc98b04b0"),
                            Title = "Ender's Game"
                        },
                        new
                        {
                            Id = new Guid("d481bf58-eb10-42d8-808f-53903c442d43"),
                            Author = "Jane Austen",
                            CategoryId = new Guid("9f875e22-4fe7-4d11-a43c-8cd987664bc7"),
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = new Guid("3c6ed3f9-a22d-472b-9c04-fb3ccdfe7a56"),
                            Author = "Harper Lee",
                            CategoryId = new Guid("ff7af3e6-912c-46d0-963a-d3160b3981dc"),
                            Title = "To Kill A Mockingbird"
                        },
                        new
                        {
                            Id = new Guid("9246989e-0878-4744-b954-f7f351d7726f"),
                            Author = "William Golding",
                            CategoryId = new Guid("ff7af3e6-912c-46d0-963a-d3160b3981dc"),
                            Title = "Lord of the Flies"
                        },
                        new
                        {
                            Id = new Guid("ce5b09ea-5bcc-4169-bb77-51ab8b1eec16"),
                            Author = "Neil Gaiman",
                            CategoryId = new Guid("30962989-6cc8-493f-af07-d98e99eeb772"),
                            Title = "Stardust "
                        },
                        new
                        {
                            Id = new Guid("0e011b4b-f900-4f13-b0c8-a1f6616873b0"),
                            Author = "Marc Cameron",
                            CategoryId = new Guid("ff7af3e6-912c-46d0-963a-d3160b3981dc"),
                            Title = "Tom Clancy's Oath of Office "
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.BookRequest", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("BookRequests");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("a7dded3b-d6b9-4c06-8330-1b1933ca1829"),
                            RequestId = new Guid("c7946198-ad33-439f-88f9-fc9d76a01ac9")
                        },
                        new
                        {
                            BookId = new Guid("4aa0eef9-0193-44c7-9fe1-c1b94fc9404a"),
                            RequestId = new Guid("c7946198-ad33-439f-88f9-fc9d76a01ac9")
                        },
                        new
                        {
                            BookId = new Guid("8fbd4703-069e-4270-b629-b52bc3b0c507"),
                            RequestId = new Guid("c7946198-ad33-439f-88f9-fc9d76a01ac9")
                        },
                        new
                        {
                            BookId = new Guid("a41edf6f-59f9-4abe-8faf-22589ea87d5b"),
                            RequestId = new Guid("fcb247ce-ba7d-4f92-a210-19255e156664")
                        },
                        new
                        {
                            BookId = new Guid("30432c29-1b74-4086-aed9-e160ecc5ee98"),
                            RequestId = new Guid("fcb247ce-ba7d-4f92-a210-19255e156664")
                        },
                        new
                        {
                            BookId = new Guid("7f52f5b8-bc1c-4753-8216-101d80f52198"),
                            RequestId = new Guid("0f5baf8f-9726-488c-8a32-a60b98f4ac23")
                        },
                        new
                        {
                            BookId = new Guid("d481bf58-eb10-42d8-808f-53903c442d43"),
                            RequestId = new Guid("0f5baf8f-9726-488c-8a32-a60b98f4ac23")
                        },
                        new
                        {
                            BookId = new Guid("8fbd4703-069e-4270-b629-b52bc3b0c507"),
                            RequestId = new Guid("0f5baf8f-9726-488c-8a32-a60b98f4ac23")
                        },
                        new
                        {
                            BookId = new Guid("3c6ed3f9-a22d-472b-9c04-fb3ccdfe7a56"),
                            RequestId = new Guid("f3531fe5-8e2b-4468-a460-13000da0fef6")
                        },
                        new
                        {
                            BookId = new Guid("9246989e-0878-4744-b954-f7f351d7726f"),
                            RequestId = new Guid("f3531fe5-8e2b-4468-a460-13000da0fef6")
                        },
                        new
                        {
                            BookId = new Guid("0e011b4b-f900-4f13-b0c8-a1f6616873b0"),
                            RequestId = new Guid("f3531fe5-8e2b-4468-a460-13000da0fef6")
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30962989-6cc8-493f-af07-d98e99eeb772"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("fe58ee57-2ad7-4208-b969-765c52034e4d"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("4ae8cd04-36d5-43f1-bb2e-44ccc98b04b0"),
                            Name = "Sci-fi"
                        },
                        new
                        {
                            Id = new Guid("9f875e22-4fe7-4d11-a43c-8cd987664bc7"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("5ed4d2c8-9f76-4880-b08e-2f6651f0b1e8"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("ff7af3e6-912c-46d0-963a-d3160b3981dc"),
                            Name = "Thriller"
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.RequestModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7946198-ad33-439f-88f9-fc9d76a01ac9"),
                            RequestedDate = new DateTime(2021, 4, 18, 10, 31, 14, 550, DateTimeKind.Local).AddTicks(3017),
                            Status = 1,
                            UserId = new Guid("ab2a7ee6-d65c-4ae4-964a-25b2f9da4638")
                        },
                        new
                        {
                            Id = new Guid("fcb247ce-ba7d-4f92-a210-19255e156664"),
                            RequestedDate = new DateTime(2021, 4, 18, 10, 31, 14, 551, DateTimeKind.Local).AddTicks(9299),
                            Status = 0,
                            UserId = new Guid("ab2a7ee6-d65c-4ae4-964a-25b2f9da4638")
                        },
                        new
                        {
                            Id = new Guid("0f5baf8f-9726-488c-8a32-a60b98f4ac23"),
                            RequestedDate = new DateTime(2021, 4, 18, 10, 31, 14, 551, DateTimeKind.Local).AddTicks(9340),
                            Status = 2,
                            UserId = new Guid("057ff517-113e-47db-bf82-daca85d3c327")
                        },
                        new
                        {
                            Id = new Guid("f3531fe5-8e2b-4468-a460-13000da0fef6"),
                            RequestedDate = new DateTime(2021, 4, 18, 10, 31, 14, 551, DateTimeKind.Local).AddTicks(9345),
                            Status = 0,
                            UserId = new Guid("057ff517-113e-47db-bf82-daca85d3c327")
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e47eedb-dbfd-4850-8153-8fde088d3c64"),
                            Password = "admin123",
                            Role = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("ab2a7ee6-d65c-4ae4-964a-25b2f9da4638"),
                            Password = "user123",
                            Role = 0,
                            Username = "love2read"
                        },
                        new
                        {
                            Id = new Guid("057ff517-113e-47db-bf82-daca85d3c327"),
                            Password = "user456",
                            Role = 0,
                            Username = "novelreader"
                        },
                        new
                        {
                            Id = new Guid("bef2efc6-7f39-4790-ae0e-e8a1b51530ea"),
                            Password = "user234",
                            Role = 0,
                            Username = "readingoverrated"
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.Book", b =>
                {
                    b.HasOne("LibraryAPI.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryAPI.Models.BookRequest", b =>
                {
                    b.HasOne("LibraryAPI.Models.Book", "Book")
                        .WithMany("BookRequests")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.RequestModel", "Request")
                        .WithMany("BookRequests")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("LibraryAPI.Models.RequestModel", b =>
                {
                    b.HasOne("LibraryAPI.Models.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryAPI.Models.Book", b =>
                {
                    b.Navigation("BookRequests");
                });

            modelBuilder.Entity("LibraryAPI.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryAPI.Models.RequestModel", b =>
                {
                    b.Navigation("BookRequests");
                });

            modelBuilder.Entity("LibraryAPI.Models.User", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
