// <auto-generated />
using System;
using LibraryAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryAPI.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibraryAPI.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3a3cb73-a787-417d-b0b3-560762f7cc32"),
                            Author = "Erin LaTimer",
                            CategoryId = new Guid("575a70c6-4939-4f80-8561-2f6859e95468"),
                            Title = "Frost"
                        },
                        new
                        {
                            Id = new Guid("773a4792-4665-4b36-b3cf-373111ba5073"),
                            Author = "Erin LaTimer",
                            CategoryId = new Guid("575a70c6-4939-4f80-8561-2f6859e95468"),
                            Title = "Flame"
                        },
                        new
                        {
                            Id = new Guid("29136b79-9a94-476f-885f-fe88cc7d99fa"),
                            Author = "J.K. Rowling",
                            CategoryId = new Guid("575a70c6-4939-4f80-8561-2f6859e95468"),
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = new Guid("c144a47a-5d59-4469-9e43-cd2e50b21fe5"),
                            Author = "Ernest Cline",
                            CategoryId = new Guid("a2941d65-66f0-441b-a8db-305c44a177d1"),
                            Title = "Ready Player One"
                        },
                        new
                        {
                            Id = new Guid("584c120e-3f83-4f98-b9e5-0d06d73af08c"),
                            Author = "Ernest Cline",
                            CategoryId = new Guid("a2941d65-66f0-441b-a8db-305c44a177d1"),
                            Title = "Ready Player Two"
                        },
                        new
                        {
                            Id = new Guid("857a6539-7a00-42b7-a617-7cde663f03ed"),
                            Author = "Orson Scott Card",
                            CategoryId = new Guid("e469aa7b-43ec-43e9-a039-aec188d0927b"),
                            Title = "Ender's Game"
                        },
                        new
                        {
                            Id = new Guid("51738280-4e32-4e8d-8f04-d1bf56f7fcd1"),
                            Author = "Jane Austen",
                            CategoryId = new Guid("dee4e232-6150-4cce-b0ee-87994fb7e9c7"),
                            Title = "Pride and Prejudice"
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.BookRequest", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("BookRequests");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("c3a3cb73-a787-417d-b0b3-560762f7cc32"),
                            RequestId = new Guid("1cd38e70-92ec-480d-ad6d-3edf3892f580")
                        },
                        new
                        {
                            BookId = new Guid("773a4792-4665-4b36-b3cf-373111ba5073"),
                            RequestId = new Guid("1cd38e70-92ec-480d-ad6d-3edf3892f580")
                        },
                        new
                        {
                            BookId = new Guid("29136b79-9a94-476f-885f-fe88cc7d99fa"),
                            RequestId = new Guid("1cd38e70-92ec-480d-ad6d-3edf3892f580")
                        },
                        new
                        {
                            BookId = new Guid("c144a47a-5d59-4469-9e43-cd2e50b21fe5"),
                            RequestId = new Guid("8dcdb002-d76a-4a10-bf71-cba54166a96e")
                        },
                        new
                        {
                            BookId = new Guid("584c120e-3f83-4f98-b9e5-0d06d73af08c"),
                            RequestId = new Guid("8dcdb002-d76a-4a10-bf71-cba54166a96e")
                        },
                        new
                        {
                            BookId = new Guid("857a6539-7a00-42b7-a617-7cde663f03ed"),
                            RequestId = new Guid("e9634a46-c958-4ed9-9ddc-c757e3f33532")
                        },
                        new
                        {
                            BookId = new Guid("51738280-4e32-4e8d-8f04-d1bf56f7fcd1"),
                            RequestId = new Guid("e9634a46-c958-4ed9-9ddc-c757e3f33532")
                        },
                        new
                        {
                            BookId = new Guid("29136b79-9a94-476f-885f-fe88cc7d99fa"),
                            RequestId = new Guid("e9634a46-c958-4ed9-9ddc-c757e3f33532")
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("575a70c6-4939-4f80-8561-2f6859e95468"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("a2941d65-66f0-441b-a8db-305c44a177d1"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("e469aa7b-43ec-43e9-a039-aec188d0927b"),
                            Name = "Sci-fi"
                        },
                        new
                        {
                            Id = new Guid("dee4e232-6150-4cce-b0ee-87994fb7e9c7"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("f49e5494-a209-4cd2-a613-b7d13f2286f0"),
                            Name = "Comedy"
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.RequestModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cd38e70-92ec-480d-ad6d-3edf3892f580"),
                            RequestedDate = new DateTime(2021, 4, 14, 16, 2, 42, 820, DateTimeKind.Local).AddTicks(9142),
                            Status = "Approved",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("4b8cc646-59cf-4ac9-a206-14cd63f57eee")
                        },
                        new
                        {
                            Id = new Guid("8dcdb002-d76a-4a10-bf71-cba54166a96e"),
                            RequestedDate = new DateTime(2021, 4, 14, 16, 2, 42, 822, DateTimeKind.Local).AddTicks(8530),
                            Status = "Pending",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("4b8cc646-59cf-4ac9-a206-14cd63f57eee")
                        },
                        new
                        {
                            Id = new Guid("e9634a46-c958-4ed9-9ddc-c757e3f33532"),
                            RequestedDate = new DateTime(2021, 4, 14, 16, 2, 42, 822, DateTimeKind.Local).AddTicks(8718),
                            Status = "Rejected",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("26fb0253-f681-471d-8915-7cdb8ed431f7")
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e45cdf5-e755-4c93-a0af-f7073e46c190"),
                            Password = "admin123",
                            Role = "admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("4b8cc646-59cf-4ac9-a206-14cd63f57eee"),
                            Password = "user123",
                            Role = "admin",
                            Username = "love2read"
                        },
                        new
                        {
                            Id = new Guid("26fb0253-f681-471d-8915-7cdb8ed431f7"),
                            Password = "user456",
                            Role = "admin",
                            Username = "novelreader"
                        });
                });

            modelBuilder.Entity("LibraryAPI.Models.Book", b =>
                {
                    b.HasOne("LibraryAPI.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryAPI.Models.BookRequest", b =>
                {
                    b.HasOne("LibraryAPI.Models.Book", "Book")
                        .WithMany("BookRequests")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.Models.RequestModel", "Request")
                        .WithMany("BookRequests")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("LibraryAPI.Models.RequestModel", b =>
                {
                    b.HasOne("LibraryAPI.Models.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryAPI.Models.Book", b =>
                {
                    b.Navigation("BookRequests");
                });

            modelBuilder.Entity("LibraryAPI.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryAPI.Models.RequestModel", b =>
                {
                    b.Navigation("BookRequests");
                });

            modelBuilder.Entity("LibraryAPI.Models.User", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
